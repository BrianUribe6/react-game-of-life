{"version":3,"sources":["components/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Square","alive","background","className","countLives","grid","i","j","m","length","n","count","dir","row","col","nextState","cache","push","lives","Grid","data","map","val","Game","props","width","window","innerWidth","height","innerHeight","useState","rows","Math","floor","cols","life","round","random","initGrid","setGrid","useEffect","sleep","time","a","Promise","resolve","setTimeout","nextGeneration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b289a71.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './game.css';\r\n\r\n\r\nconst SQUARE_SIZE = 32;\r\n\r\nfunction Square({alive}) {\r\n    let background = `bg-${alive ? 'white': 'black'}`\r\n    return (<div className={`square grid-col ${background}`}/>);\r\n}\r\n\r\nfunction countLives(grid, i, j) {\r\n    const m = grid.length;\r\n    const n = grid[0].length;\r\n    let count = 0\r\n    const directions = [\r\n        [1, 0],     //top\r\n        [1, 1],     //top-right\r\n        [0, 1],     //right\r\n        [-1, 1],    //bottom-right\r\n        [-1, 0],    //bottom\r\n        [-1, -1],   //bottom-left\r\n        [0, -1],    //left\r\n        [1, -1],    //top-left\r\n    ]\r\n    for (let dir of directions) {\r\n        const [x, y] = dir;\r\n        const row = i + x;\r\n        const col = j + y;\r\n\r\n        if ((row >= 0 && row < m) && (col >= 0 && col < n)) {\r\n            count += grid[row][col];\r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nfunction nextState(grid) {\r\n    let m = grid.length;\r\n    let n = grid[0].length;\r\n\r\n    let cache = []\r\n    for (let row of grid)   cache.push([...row])\r\n\r\n    for (let i = 0; i < m; i++) {\r\n        for (let j = 0; j < n; j++) {\r\n            let lives = countLives(grid, i, j);\r\n            if (grid[i][j] > 0) {\r\n                cache[i][j] = (lives < 2 || lives > 3) ? 0 : 1;\r\n            }\r\n            else {\r\n                cache[i][j] = (lives === 3) ? 1 : 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    return cache\r\n}\r\n\r\nfunction initGrid(width, height) {\r\n    let rows = Math.floor(height / SQUARE_SIZE);\r\n    let cols = Math.floor(width / SQUARE_SIZE);\r\n    \r\n    const grid = [];\r\n    for (let i = 0; i < rows; i++) {\r\n        const row = [];\r\n        for (let j = 0; j < cols; j++) {\r\n            const life = Math.round(Math.random())\r\n            // console.log(life);\r\n            row.push(life);\r\n        }\r\n        grid.push(row);\r\n    }\r\n    return nextState(grid);\r\n}\r\n\r\nfunction Grid({data}) {\r\n    //console.log(data);\r\n    return (\r\n        <div className=\"grid\">\r\n            {data.map((row) =>(\r\n                <div className=\"grid-row\">\r\n                    {row.map((val) => <Square alive={val > 0}/>)}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function Game(props) {\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    const [grid, setGrid] = useState(initGrid(width, height));\r\n\r\n    // useEffect(() => {\r\n    //     const sleep = (time) => new Promise((res) => setTimeout(res, time));\r\n    //     while (true) {\r\n    //         sleep(1 / 60);\r\n    //         setGrid(nextState(grid));\r\n    //     }\r\n    // }, [grid])\r\n    // return \"Hello World\";\r\n    useEffect(() => {\r\n        const sleep = async (time) => new Promise((resolve) => setTimeout(resolve, time));\r\n        const nextGeneration = async () => {\r\n            await sleep(100);\r\n            setGrid(nextState(grid));\r\n        }\r\n        nextGeneration();\r\n    }, [grid])\r\n    return <Grid data={grid} />;\r\n}","import { Game } from './components/Game';\n\n\nfunction App() {\n  return <Game />\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}